version: "3.4"

services:
  library_gateway:
    image: ${DOCKER_REGISTRY-}library_gateway
    container_name: "library_gateway"
    restart: on-failure
    networks:
      - "library_services_net"
    volumes:
      - ~/docker/logs/family:/app/logs
    ports:
      - "5000:80"    
    environment:
      - AUDIENCE_KEY=$AUDIENCE_KEY
      - TZ=$TIME_ZONE
      - LISTENING_PORT=80 

    build:
      context: .
      dockerfile: LibraryServices.Gateway/Dockerfile    

  library_family:
    image: ${DOCKER_REGISTRY-}library_family
    container_name: "library_family"
    restart: on-failure
    volumes:
      - ~/docker/logs/family:/app/logs
    networks:
      - "library_services_net"
    environment:
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
      - POSTGRESQL_HOST=$POSTGRESQL_HOST
      - POSTGRESQL_DATABASE=$POSTGRESQL_DATABASE
      - POSTGRESQL_USER=$POSTGRESQL_USER
      - POSTGRESQL_PORT=$POSTGRESQL_PORT
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PASSWORD=$REDIS_PASSWORD
      - AUDIENCE_KEY=$AUDIENCE_KEY
      - AES_KEY=$AES_KEY
      - TZ=$TIME_ZONE
      - MINIO_HOST=$MINIO_HOST
      - MINIO_ROOT_USER=$MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD
      - SNOWFLAKES_WORKID=$SNOWFLAKES_WORKID
      - LISTENING_PORT=80 
    depends_on:
      - postgresql
      - redis
    ports:
      - "7000:80"
    build:
      context: .
      dockerfile: LibraryServices.FamilyService/Dockerfile

  library_identity:
    image: ${DOCKER_REGISTRY-}library_identity
    container_name: "library_identity"
    restart: on-failure
    networks:
      - "library_services_net"
    volumes:
      - ~/docker/logs/identity:/app/logs
    environment:
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
      - POSTGRESQL_HOST=$POSTGRESQL_HOST
      - POSTGRESQL_DATABASE=$POSTGRESQL_DATABASE
      - POSTGRESQL_USER=$POSTGRESQL_USER
      - POSTGRESQL_PORT=$POSTGRESQL_PORT
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PASSWORD=$REDIS_PASSWORD
      - AUDIENCE_KEY=$AUDIENCE_KEY
      - AES_KEY=$AES_KEY
      - TZ=$TIME_ZONE
      - SNOWFLAKES_WORKID=$SNOWFLAKES_WORKID
      - LISTENING_PORT=80 
    depends_on:
      - postgresql
      - redis
    ports:
      - "8000:80"
    build:
      context: .
      dockerfile: LibraryServices.IdentityService/Dockerfile

  library_package:
    image: ${DOCKER_REGISTRY-}library_package
    container_name: "library_package"
    restart: on-failure
    networks:
      - "library_services_net"
    volumes:
      - ~/docker/logs/package:/app/logs
    environment:
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
      - POSTGRESQL_HOST=$POSTGRESQL_HOST
      - POSTGRESQL_DATABASE=$POSTGRESQL_DATABASE
      - POSTGRESQL_USER=$POSTGRESQL_USER
      - POSTGRESQL_PORT=$POSTGRESQL_PORT
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PASSWORD=$REDIS_PASSWORD
      - AUDIENCE_KEY=$AUDIENCE_KEY
      - AES_KEY=$AES_KEY
      - TZ=$TIME_ZONE
      - SNOWFLAKES_WORKID=$SNOWFLAKES_WORKID
      - LISTENING_PORT=80
    depends_on:
      - postgresql
      - redis
    ports:
      - "9000:80"
    build:
      context: .
      dockerfile: LibraryServices.PackageService/Dockerfile

  library_parameter:
    image: ${DOCKER_REGISTRY-}library_parameter
    container_name: "library_parameter"
    restart: on-failure
    networks:
      - "library_services_net"
    volumes:
      - ~/docker/logs/parameter:/app/logs
    environment:
      - POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD
      - POSTGRESQL_HOST=$POSTGRESQL_HOST
      - POSTGRESQL_DATABASE=$POSTGRESQL_DATABASE
      - POSTGRESQL_USER=$POSTGRESQL_USER
      - POSTGRESQL_PORT=$POSTGRESQL_PORT
      - REDIS_HOST=$REDIS_HOST
      - REDIS_PASSWORD=$REDIS_PASSWORD
      - AUDIENCE_KEY=$AUDIENCE_KEY
      - AES_KEY=$AES_KEY
      - TZ=$TIME_ZONE
      - SNOWFLAKES_WORKID=$SNOWFLAKES_WORKID
      - LISTENING_PORT=80 
    depends_on:
      - postgresql
      - redis
    ports:
      - "10000:80"
    build:
      context: .
      dockerfile: LibraryServices.ParameterService/Dockerfile

  postgresql:
    container_name: "postgresql"
    image: "postgres"
    restart: unless-stopped
    ports:
      - "$POSTGRESQL_PORT:5432"
    networks:
      - "library_services_net"
    environment:
      TZ: "GMT+8"
      PGTZ: "GMT+8"

  redis:
    networks:
      - "library_services_net"
    restart: unless-stopped
    container_name: "redis"
    image: "redis"
    ports:
      - "$REDIS_PORT:6379"
    command: redis-server --requirepass $REDIS_PASSWORD

  seqcli:
    image: datalust/seqcli:latest
    container_name: "seqcli"
    command: apikey create -t newapikey --token $SEQ_TOKEN -s http://seq
    depends_on:
      - seq
    restart: on-failure
    networks:
      - library_services_net

  seq:
    image: datalust/seq:latest
    container_name: "seq"
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:80"
    networks:
      - library_services_net
    
  consul_service:
    image: consul:1.15.4
    container_name: "consul_service"
    networks:
      - library_services_net
    command: agent -server -client=0.0.0.0 -datacenter=libaray_services -bootstrap-expect=2 -node=library_consul_service
    volumes:
      - ~/docker/consul/data/consul_service:/data

  consul_service1:
    image: consul:1.15.4
    container_name: "consul_service1"
    command: agent -server -client=0.0.0.0 -datacenter=libaray_services  -retry-join=consul_service -node=library_consul_service1
    networks:
      - library_services_net
    volumes:
      - ~/docker/consul/data/consul_service1:/data
    depends_on:
      - consul_service

  consul_client:
    image: consul:1.15.4
    container_name: "consul_client"
    command: agent -client=0.0.0.0 -datacenter=libaray_services -retry-join=consul_service -ui -node=consul_client
    networks:
      - library_services_net
    ports:
      - 8500:8500
    volumes:
      - ~/docker/consul/data/consul_client:/data
    depends_on:
      - consul_service1

networks:
  library_services_net:
    driver: bridge
